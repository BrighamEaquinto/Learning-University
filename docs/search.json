[
  {
    "objectID": "Data Science/Classification Model.html",
    "href": "Data Science/Classification Model.html",
    "title": "Classification Model",
    "section": "",
    "text": "Libraries\n\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import tree\n\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.pipeline import make_pipeline\n\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, classification_report, confusion_matrix\n\nimport seaborn as sns\n\n\n\nData & Preprocessing\n\ndat = pd.read_csv(\"https://raw.githubusercontent.com/saundersg/Statistics-Notebook/master/Data/CarPrices.csv\")\n\n# dat = pd.get_dummies(dat)\ndat = pd.factorize(dat.select_dtypes(include='object'))\n\n\ndf1 = dat.filter([\"Type\"], axis = 1)\ndf1['Type_1'] = LabelEncoder().fit_transform(dat['Type'])\n\n\n\nSplitting\n\ny = dat.filter(['Type'], axis = 1)\nX = dat.drop('Type', axis = 1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n\n\n\nModeling\n\nmodel = tree.DecisionTreeClassifier()\nmodel = model.fit(X_train, y_train)\ny_pred1 = model.predict(X_test)\n\n\nmake_pipeline(StandardScaler(), GaussianNB(priors=None))\n\n\n\nMetrics\n\nr2 = r2_score(y_test, y_pred1).round(3)\nmae = mean_absolute_error(y_test, y_pred1).round(3)\nmse = mean_squared_error(y_test, y_pred1, squared=False).round(3)\nme = mean_squared_error(y_test, y_pred1, squared=True).round(3)\nprint(f'R2 = {r2}\\nMAE = {mae}\\nMSE = {mse}\\nME = {me}')\n\n\n\nFeature Examination\n\nfeatures_importances = (\n    pd.DataFrame({'Columns': np.array(X.columns),\n                  'Features': np.array(model.feature_importances_)})\n    .sort_values(by = 'Features', ascending = False)\n                     )\n# features_importances.to_csv(\"feature_importances.csv\")\n\n\nsns.barplot(y = 'Columns', x = 'Features', data = features_importances.head(10), color = \"lightblue\") \n\n\n\n\nCode Graveyard"
  },
  {
    "objectID": "Data Science/dax/dax.html",
    "href": "Data Science/dax/dax.html",
    "title": "DAX Reference",
    "section": "",
    "text": "CALENDAR(StartDate, EndDate)\n\nDescription: Returns a table with one column of all dates between StartDate and EndDate.\nParameters:\n\nStartDate: The start date in datetime format\nEndDate: The end date in datetime format\n\n\n\n\nExample 1\nDim_DeliveryDate = \nCALENDAR(\n    MIN(Fact_Sales[Delivery Date Key]), \n    MAX(Fact_Sales[Delivery Date Key])\n    )\n\n\n\n\nExample 2\n# Code for another example here\n\n\n\n\nMAX()\nSee CALENDAR() function reference, example 1.\n\n\nMIN()\nSee CALENDAR() function reference, example 1.\n\n\nSUBSTITUTE(text, oldtext, newtext)\n\nDescription: This is similar to regex and Power Query Editor’s “Replace Values”\nParameters:\n\ntext: The text to manipulate. Can be a column.\noldtext: The piece of text to replace.\nnewtext: The text we want to insert. This can just be two quotation marks to do a blank.\n\n\n\n\nExample 1\nRetail Price Clean = \nSUBSTITUTE(\n    Dim_StockItem[Recommended Retail Price], \n    \"? \", \n    \"\"\n    )\n\n\n\n\nCounting Gender\n\n\nExample 1\ncount_female = \nCOUNTROWS(FILTER(Query1, Query1[gender] == \"Female\"))"
  },
  {
    "objectID": "Data Science/ds_tools.html",
    "href": "Data Science/ds_tools.html",
    "title": "Data Science Tools",
    "section": "",
    "text": "Click to download"
  },
  {
    "objectID": "Data Science/ds_tools.html#subjects",
    "href": "Data Science/ds_tools.html#subjects",
    "title": "Data Science Tools",
    "section": "Subjects",
    "text": "Subjects\nIDE\nWrangling\nVisualization\nML\nDashboard\nReports\nScript\nConsole"
  },
  {
    "objectID": "Data Science/ds_tools.html#r",
    "href": "Data Science/ds_tools.html#r",
    "title": "Data Science Tools",
    "section": "R",
    "text": "R\nVSCode, RStudio\ndplyr\nggplot2\nTidymodels\nShiny\nRMD, QMD\n.r\nterminal"
  },
  {
    "objectID": "Data Science/ds_tools.html#python",
    "href": "Data Science/ds_tools.html#python",
    "title": "Data Science Tools",
    "section": "Python",
    "text": "Python\nVSCode, RStudio\npandas\nplotly\nPyTorch, Tensorflow/Keras, Sklearn\nDash\nipynd, QMD\n.py\njupyter interactive console"
  },
  {
    "objectID": "Data Science/julia/delete_julia.html",
    "href": "Data Science/julia/delete_julia.html",
    "title": "Why Julia?",
    "section": "",
    "text": "Christian History\nPoster\nIF presentation\nDesign Thinking assignments\nmath (tutoring?)\nData Science is:"
  },
  {
    "objectID": "Data Science/julia/delete_julia.html#downloding-r",
    "href": "Data Science/julia/delete_julia.html#downloding-r",
    "title": "Why Julia?",
    "section": "Downloding R",
    "text": "Downloding R"
  },
  {
    "objectID": "Data Science/julia/delete_julia.html#installing-packages",
    "href": "Data Science/julia/delete_julia.html#installing-packages",
    "title": "Why Julia?",
    "section": "Installing Packages",
    "text": "Installing Packages"
  },
  {
    "objectID": "Data Science/julia/delete_julia.html#downloading-python",
    "href": "Data Science/julia/delete_julia.html#downloading-python",
    "title": "Why Julia?",
    "section": "Downloading Python",
    "text": "Downloading Python"
  },
  {
    "objectID": "Data Science/julia/delete_julia.html#installing-python",
    "href": "Data Science/julia/delete_julia.html#installing-python",
    "title": "Why Julia?",
    "section": "Installing Python",
    "text": "Installing Python"
  },
  {
    "objectID": "Data Science/julia/delete_julia.html#downloading-julia",
    "href": "Data Science/julia/delete_julia.html#downloading-julia",
    "title": "Why Julia?",
    "section": "Downloading Julia",
    "text": "Downloading Julia"
  },
  {
    "objectID": "Data Science/julia/delete_julia.html#installing-packages-1",
    "href": "Data Science/julia/delete_julia.html#installing-packages-1",
    "title": "Why Julia?",
    "section": "Installing Packages",
    "text": "Installing Packages"
  },
  {
    "objectID": "Data Science/ml.html",
    "href": "Data Science/ml.html",
    "title": "Learning University",
    "section": "",
    "text": "What I’m learning is that machine learning models are the same underlying method and math, but the way they’re implemented are either through r or python??\nsklearn = tidymodels\npytorch = torch"
  },
  {
    "objectID": "Data Science/ml.html#explanations",
    "href": "Data Science/ml.html#explanations",
    "title": "Learning University",
    "section": "Explanations",
    "text": "Explanations\nensamble\n\nRandom Forest Model"
  },
  {
    "objectID": "Data Science/ml.html#sklearn",
    "href": "Data Science/ml.html#sklearn",
    "title": "Learning University",
    "section": "Sklearn",
    "text": "Sklearn\nCode here\n\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split"
  },
  {
    "objectID": "Data Science/ml.html#tidymodels",
    "href": "Data Science/ml.html#tidymodels",
    "title": "Learning University",
    "section": "Tidymodels",
    "text": "Tidymodels\nCode here\n\nlibrary(tidyverse)\nlibrary(tidymodels)"
  },
  {
    "objectID": "Data Science/ml.html#data-work",
    "href": "Data Science/ml.html#data-work",
    "title": "Learning University",
    "section": "Data Work",
    "text": "Data Work\n\nreading in data\ntidying/wrangling\n\n“massaging data”\nscale/normalizing\nunder/oversampling\nimputing\n\nsplitting data"
  },
  {
    "objectID": "Data Science/ml.html#modeling-p1",
    "href": "Data Science/ml.html#modeling-p1",
    "title": "Learning University",
    "section": "Modeling P1",
    "text": "Modeling P1\n\ninitialize model\npredictions"
  },
  {
    "objectID": "Data Science/ml.html#modeling-p2",
    "href": "Data Science/ml.html#modeling-p2",
    "title": "Learning University",
    "section": "Modeling P2",
    "text": "Modeling P2\n\nhypertune model\n\ngrid search\n\nfeature engineering\n\nstat tools\nencoding"
  },
  {
    "objectID": "Data Science/ml.html#testing",
    "href": "Data Science/ml.html#testing",
    "title": "Learning University",
    "section": "Testing",
    "text": "Testing\n\naccuracy\nrecall & precision\nf1 & roc_auc\nhold out set"
  },
  {
    "objectID": "Data Science/ml.html#plotting",
    "href": "Data Science/ml.html#plotting",
    "title": "Learning University",
    "section": "Plotting",
    "text": "Plotting\n\nPairs plot\nconfusion matrix\nauc"
  },
  {
    "objectID": "Data Science/ml.html#others",
    "href": "Data Science/ml.html#others",
    "title": "Learning University",
    "section": "Others",
    "text": "Others\n\nbalancing data\nscaling data\nother transformers\nmetrics\npreprocessing & normalization\nestimators\nwhat about making a loop/function that goes through all the preprocessors/transformers/scalers/estimators\nmake a general wrangling function to apply to test and hold out data"
  },
  {
    "objectID": "Data Science/ml_py.html",
    "href": "Data Science/ml_py.html",
    "title": "Regression Model",
    "section": "",
    "text": "Libraries\n\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import tree\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.pipeline import make_pipeline\n\nfrom sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\n\nimport seaborn as sns\n\n\n\nData & Preprocessing\n\ndat = pd.read_csv(\"https://raw.githubusercontent.com/saundersg/Statistics-Notebook/master/Data/CarPrices.csv\")\n\ndat = pd.get_dummies(dat)\n\n\n\nSplitting\n\ny = dat.filter(['Price'], axis = 1)\nX = dat.drop('Price', axis = 1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n\n\n\nModeling\n\nmodel = tree.DecisionTreeRegressor().fit(X_train, y_train)\ny_pred1 = model.predict(X_test)\n\n\n\nMetrics\n\nr2 = r2_score(y_test, y_pred1).round(3)\nmse = mean_squared_error(y_test, y_pred1, squared=False).round(3)\n\nprint(f'R2 = {r2}\\nMSE = {mse}')\n\n\n\nFeature Examination\n\nfeatures_importances = (\n    pd.DataFrame({'Columns': np.array(X.columns),\n                  'Features': np.array(model.feature_importances_)})\n    .sort_values(by = 'Features', ascending = False)\n                     )\n# features_importances.to_csv(\"feature_importances.csv\")\n\n\nsns.barplot(y = 'Columns', x = 'Features', data = features_importances.head(10), color = \"lightblue\") \n\n\n\n\nCode Graveyard"
  },
  {
    "objectID": "Data Science/notes.html",
    "href": "Data Science/notes.html",
    "title": "Learning University",
    "section": "",
    "text": "Options:\nCan’t enter or color headers using Markdown, must use CSS instead: <h6 align=\"center\"; style=\"color:#808080\"> Base R </h6>"
  },
  {
    "objectID": "Data Science/notes.html#ideas",
    "href": "Data Science/notes.html#ideas",
    "title": "Learning University",
    "section": "Ideas",
    "text": "Ideas\n\nHave a notes to instructors page or part of the repo\nhave a page just for the interface of RStudio\n\nhot keys\nshortcuts\nsuch and such\n\nhave a page for R/Python equivalents\nhave a page for other generally useful things\n\nsetting up R in VSCode: https://github.com/REditorSupport/vscode-R or https://marketplace.visualstudio.com/items?itemName=REditorSupport.r or https://github.com/REditorSupport/vscode-R/wiki/Installation:-Windows\n\nhow can I use the wiki tab on the github page? What is the proper usage of it?\n\nOthers to sprinkle in lessons or have as a stand alone: - commenting code - assignment operator vs equal sign - pipe operator %>% - filtering operators (==, %in%, |, &, !=) - c(vector) and list conversation - syntax\nUse this for advance select statements: https://dplyr.tidyverse.org/reference/select.html\nn_distinct(dat\\(region) count(dat\\)region) table(dat$region)\ndat <- read_csv(“https://covid.ourworldindata.org/data/owid-covid-data.csv”) # object_size(dat) view(dat)\ndat <- read_csv(“datasets/insurance.csv”)\nn_distinct(dat\\(region) count(dat\\)region) table(dat$region)\nR Scipts vs. RMDs The data science process (flow chart of start to finish and where most time is spent)\nLesson 1: Introduction - Installation - the RStudio interface - an introduction to Data Science. Give the full scope of data science. - what about sending the newbies to this page during future weeks? Put a video there? Lesson 2: Readr - reading in data from CSV - reading in data from URL - writing data to CSV Lesson 3: Wrangling Data - need another day on this Lesson 4: Grouping, Summarising, Arranging Lesson 5: Graphing 1/2 Lesson 6: Graphing 2/2\nmean(iris)\nOutput messages like in lm()’s “using base 10 in log()” if no other given. Have my prefered syntax of powers using {} syntax. If indeterminant form, prompt the user, what would you like to do from here. Can we get it to show work? Out put in latex?!?!"
  },
  {
    "objectID": "Data Science/py_examples/qmd.html",
    "href": "Data Science/py_examples/qmd.html",
    "title": "Untitled",
    "section": "",
    "text": "import pandas as pd\n\ndat = pd.read_csv(\"https://raw.githubusercontent.com/BrighamEaquinto/brighameaquinto.github.io/master/datasets/insurance.csv\")\n\ndat\n\n\n\n\n\n  \n    \n      \n      age\n      sex\n      bmi\n      children\n      smoker\n      region\n      charges\n    \n  \n  \n    \n      0\n      19\n      female\n      27.900\n      0\n      yes\n      southwest\n      16884.92400\n    \n    \n      1\n      18\n      male\n      33.770\n      1\n      no\n      southeast\n      1725.55230\n    \n    \n      2\n      28\n      male\n      33.000\n      3\n      no\n      southeast\n      4449.46200\n    \n    \n      3\n      33\n      male\n      22.705\n      0\n      no\n      northwest\n      21984.47061\n    \n    \n      4\n      32\n      male\n      28.880\n      0\n      no\n      northwest\n      3866.85520\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      1333\n      50\n      male\n      30.970\n      3\n      no\n      northwest\n      10600.54830\n    \n    \n      1334\n      18\n      female\n      31.920\n      0\n      no\n      northeast\n      2205.98080\n    \n    \n      1335\n      18\n      female\n      36.850\n      0\n      no\n      southeast\n      1629.83350\n    \n    \n      1336\n      21\n      female\n      25.800\n      0\n      no\n      southwest\n      2007.94500\n    \n    \n      1337\n      61\n      female\n      29.070\n      0\n      yes\n      northwest\n      29141.36030\n    \n  \n\n1338 rows × 7 columns\n\n\n\n\nimport plotly.express as px\n\nfig = px.bar(dat, x = 'sex')\n\n\nfig.show(renderer=\"png\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Learning University",
    "section": "",
    "text": "Intresting paradigm. Employers want experience. Graduate schools want grades. Competing interests… But they both ultimately want money.\nWhat’s the point of education? Portfolio projects or mastery of subject?\n\nDash dashboards\nQuarto Websites\ncoding word documents\nwriting r packages to do calculus\nQuarto Revealjs for presentations (free, animations, speaker timer, speaker notes…)\ncharacter & chapter summarising in readings\n\nWhat about pages like these?:\n\nhttps://www.datacamp.com/tutorial/facets-ggplot-r\nhttps://www.datacamp.com/tutorial/tidyverse-tutorial-r"
  },
  {
    "objectID": "Math/antiderivative.html",
    "href": "Math/antiderivative.html",
    "title": "Learning University",
    "section": "",
    "text": "Definition: A function \\(F\\) is an antiderivative of the function \\(f\\) if \\(F'(x) = f(x)\\) for all \\(x\\) in the domain of \\(f\\)."
  },
  {
    "objectID": "Math/antiderivative.html#u-sub-2-col",
    "href": "Math/antiderivative.html#u-sub-2-col",
    "title": "Learning University",
    "section": "U-Sub 2 Col",
    "text": "U-Sub 2 Col\n\n\n\n1.) \\(F(x) = \\int{\\cos{(2x)}dx}\\)\n\n\n2.) Let \\(u = 2x\\)\n\n\n\n\n3.) \\(F(x) = \\int{\\cos{(u)}dx}\\)\n\n\n4.) Take the derivative of each side \\(\\frac{d}{dx}(u) = \\frac{d}{dx}(2x)\\)\n\n\n\n\n\n\n\n5.) Now we have \\(du = 2dx\\)\n\n\n\n\n\n\n\n6.) Solve for \\(dx \\rightarrow\\) \\(dx = \\frac{du}{2}\\)\n\n\n\n\n7.) \\(F(x) = \\int{\\cos{(u)} \\times \\frac{du}{2}}\\)\n\n\n\n\n\n\n\n8.) \\(F(x) = \\frac{\\sin{(u)}}{2}\\)\n\n\n\n\nStep 1. \\[\nF(x) = \\int{\\cos{(2x)}dx}\n\\]\nStep 2. Let \\(u = 2x\\)\nStep 3. \\(F(x) = \\int{\\cos{(u)}dx}\\)\nStep 4. Take the derivative of each side\n\\[\n\\frac{d}{dx}(u) = \\frac{d}{dx}(2x)\n\\]\nStep 5. Now we have \\(du = 2dx\\)\nStep 6. Solve for \\(dx \\rightarrow\\) \\(dx = \\frac{du}{2}\\)\nStep 7. \\(F(x) = \\int{\\cos{(u)} \\times \\frac{du}{2}}\\)\nStep 8. \\(F(x) = \\frac{\\sin{(u)}}{2}\\)\n\n\\(\\int{x^{-1}}=\\int{\\frac{1}{x}}=\\ln{|x|}\\)"
  },
  {
    "objectID": "Math/common_errors.html",
    "href": "Math/common_errors.html",
    "title": "Learning University",
    "section": "",
    "text": "\\[\n\\sqrt{x+15} + \\sqrt{x+15} = 2\\sqrt{x+15}\n\\]\n\n\n\n\n\n\n\n\n\n\n\n\n\\[\n\\sqrt{x+15} + \\sqrt{x+15}\n\\text{ } \\neq \\text{ }\n(\\sqrt{x+15})^{2}\n\\]\n\n\n\n\n\n\\[\n\\sqrt{10-10x^{2}} = \\sqrt{10(1-x^{2})} = \\sqrt{10}\\times{}\\sqrt{1-x^{2}}\n\\]"
  },
  {
    "objectID": "Math/common_errors.html#exponents-as-the-zero-power",
    "href": "Math/common_errors.html#exponents-as-the-zero-power",
    "title": "Learning University",
    "section": "Exponents as the Zero Power",
    "text": "Exponents as the Zero Power\n\n\n\n\n\n\n\n\n\\[\nn^{0} = 1\n\\]\n\n\n\n\n\n\n\n\n\n\n\n\n\\[\nn^{0} \\neq 0\n\\]"
  },
  {
    "objectID": "Math/derivatives.html",
    "href": "Math/derivatives.html",
    "title": "Derivatives",
    "section": "",
    "text": "Contant Rule: Taking the derivative of a constant is \\(0\\)\n\\[\nf(x) = c\n\\] \\[\nf'(x) = 0\n\\]\nPower Rule: \\[\nf(x) = x^{n}\n\\] \\[\nf'(x) = nx^{n-1}\n\\]\nSum & Difference Rules: Taking the derivative of the sum or difference of \\(g(x)\\) and \\(f(x)\\) is the same as the derivative of \\(g(x)\\) plus or minus the derivative of \\(f(x)\\) \\[\n\\frac{\\text{d}}{\\text{dx}}(f(x) \\pm g(x))\n\\text{ } = \\text{ }\n\\frac{\\text{d}}{\\text{dx}}(f(x)) \\pm \\frac{\\text{d}}{\\text{dx}}(g(x))\n\\]\nConstant Multiple Rules: Taking the derivative of a constant times a derivative is the same as the constant multiplied by the derivative \\[\n\\frac{\\text{d}}{\\text{dx}}(kf(x))\n\\text{ } = \\text{ }\nk\\frac{\\text{d}}{\\text{dx}}(f(x))\n\\]\nProduct Rule: Taking the derivative of a function times a function \\[\n\\frac{\\text{d}}{\\text{dx}}(f(x)g(x))\n\\text{ } = \\text{ }\nf'(x)g(x) + g'(x)f(x)\n\\]\nQuotient Rule: Taking the derivative of a function divided by a function \\[\n\\frac{\\text{d}}{\\text{dx}} \\left(\\frac{f(x)}{g(x)}\\right)\n\\text{ } = \\text{ }\n\\frac{f'(x)g(x)-g'(x)f(x)}{(g(x))^{2}}\n\\]\n24+2 x (-25+6 x (2+x))\nChain Rule: to allow us to differentiate composite funtions\n\\[h(x) = (f \\circ g)(x) = f(g(x))\\] \\[h'(x) = f'(g(x))g'(x)\\]\nChain and Power Rules Combined: \\[\nh(x) = (g(x))^{n}\n\\] \\[\nh'(x) = n(g(x))^{n-1}g'(x)\n\\]"
  },
  {
    "objectID": "Math/derivatives.html#common-errorsnotes",
    "href": "Math/derivatives.html#common-errorsnotes",
    "title": "Derivatives",
    "section": "Common Errors/Notes",
    "text": "Common Errors/Notes\n\nRemember that the denominator of the quotient rule is \\((g(x))^{2}\\), not \\((g'(x))^{2}\\)"
  },
  {
    "objectID": "Math/derivatives.html#other-examples",
    "href": "Math/derivatives.html#other-examples",
    "title": "Derivatives",
    "section": "Other Examples:",
    "text": "Other Examples:\n\n\nExample\n\nFind \\(k'(x)\\) \\[\nk(x) = -2x\\left(h(x) + 2x^{2}g(x))\\right)\n\\] From here, distribute the \\(-2x\\) \\[\nk(x) = -2x\\left(h(x) + 2x^{2}g(x))\\right)\n\\] Now take the derivative of each side \\[\n\\frac{\\text{d}}{\\text{dx}} \\left(k(x)\\right)\n\\text{ } = \\text{ }\n\\frac{\\text{d}}{\\text{dx}} \\left( -2x\\left(h(x) + 2x^{2}g(x))\\right) \\right)\n\\] Notice the double chain rule \\[\n\\frac{\\text{d}}{\\text{dx}} \\left(k(x)\\right)\n\\text{ } = \\text{ }\n\\frac{\\text{d}}{\\text{dx}} \\left(-2x * h(x) \\right) + \\frac{\\text{d}}{\\text{dx}} \\left(-4x^{3} * g(x) \\right)\n\\] Derivative on the right \\[\n\\frac{\\text{d}}{\\text{dx}} \\left(-2x * h(x) \\right)\n\\rightarrow\n-2*h(x) - 2x * h'(x)\n\\] Derivative on the left \\[\n\\frac{\\text{d}}{\\text{dx}} \\left(-4x^{3} * g(x) \\right)\n\\rightarrow\n-12x^{2} * g(x) - 4x^{3} * g'(x)\n\\] Now combine everything \\[\nk'(x) = \\left(-2*h(x) - 2x * h'(x)\\right) + \\left(-12x^{2} * g(x) - 4x^{3} * g'(x)\\right)\n\\] Now substitute the values given and use algebra to simplify it"
  },
  {
    "objectID": "Math/derivatives.html#second-derivative-section",
    "href": "Math/derivatives.html#second-derivative-section",
    "title": "Derivatives",
    "section": "Second Derivative Section",
    "text": "Second Derivative Section\nThis is about: - taking the derivative a second time - local maximun and minimum - first and second derivative tests\n\ndecreasing in polynomial each time a derivative is taken\n\n\n\nd/dx == d*f(x)/dx Find the derivative of f(x) in terms of x"
  },
  {
    "objectID": "Math/derivatives.html#logarithms",
    "href": "Math/derivatives.html#logarithms",
    "title": "Derivatives",
    "section": "1) Logarithms",
    "text": "1) Logarithms\n\\[\nb^{e} = n \\text{ is the same as } \\log_{b}n = e\n\\]\n\\[\n\\log(x) = \\log_{10}(x)\n\\] \\[\n\\log_{e}(x) = \\ln(x)\n\\]"
  },
  {
    "objectID": "Math/derivatives.html#derivative-of-e-eu",
    "href": "Math/derivatives.html#derivative-of-e-eu",
    "title": "Derivatives",
    "section": "2) Derivative of \\(e\\) & \\(e^{u}\\)",
    "text": "2) Derivative of \\(e\\) & \\(e^{u}\\)\nDerivative of \\(e^{x} = e^{x}\\)\n\nThis is because the derivative of the function is the function\n\nDerivative of \\(e^{u} = e^{u}u'\\)\n\n\n\n\n\n\nExample:\n\n\n\n\\[\ne^{x^{2}} = 2e^{x^{2}}\n\\]"
  },
  {
    "objectID": "Math/derivatives.html#derivative-of-a-natural-log",
    "href": "Math/derivatives.html#derivative-of-a-natural-log",
    "title": "Derivatives",
    "section": "3) Derivative of a Natural Log",
    "text": "3) Derivative of a Natural Log\n\\[\n\\frac{d}{dx}(\\ln x) = \\frac{x'}{x}\n\\]\nOr… is it \\(\\frac{d}{dx}(\\ln x) = \\frac{1}{x}\\)? I learned the method above in tutoring and on the tutoring center’s math sheet, but I see on Knewton that the other fraction is used.\nApparently there is a way to do this using the chain rule, but she does not reccomend that method, but rather this rule."
  },
  {
    "objectID": "Math/derivatives.html#order-of-operations",
    "href": "Math/derivatives.html#order-of-operations",
    "title": "Derivatives",
    "section": "4) Order of Operations",
    "text": "4) Order of Operations\n\\(-1(x+5)^{-2}\\), the correct order of PEMDAS is to do the \\(-2\\) exponent first, the the multiplication of \\(-1\\) times the base.\nThink of it like this, \\(-1 * (x+5)^{-2}\\)\nP E M D A S\nExponents come before multiplication"
  },
  {
    "objectID": "Math/derivatives.html#see-when-to-use-the-chain-rule",
    "href": "Math/derivatives.html#see-when-to-use-the-chain-rule",
    "title": "Derivatives",
    "section": "5) See when to use the Chain Rule",
    "text": "5) See when to use the Chain Rule\nTaking that problem above a step to the side,\nThe derivative of \\(-1(x+5)^{-2}\\) is\n$$\n$$"
  },
  {
    "objectID": "Math/derivatives.html#section",
    "href": "Math/derivatives.html#section",
    "title": "Derivatives",
    "section": "6?",
    "text": "6?\nWhen given \\(k(x) = x\\left(2x+\\frac{1}{x+3}\\right)\\) to find \\(k'(x)\\), there are two ways. Either:\n\npreform the product rule from here\n\nor\n\ndistribute the \\(x\\), then take the derivative from there (which will include either a quotient rule or a chain & product rule)"
  },
  {
    "objectID": "Math/derivatives.html#chain-rule-examples",
    "href": "Math/derivatives.html#chain-rule-examples",
    "title": "Derivatives",
    "section": "Chain Rule Examples",
    "text": "Chain Rule Examples\n\n\n\n\n\n\nExample:\n\n\n\n\\(h(x) = 4\\sin^{11}(x)\\), find \\(h'(x)\\)\nThis one confused me. I guess it is a chain rule. Here’s my work:\n\\(h(x) = 4\\sin^{11}(x) \\rightarrow 4(\\sin(x))^{11}\\)\n\n\\(f(x) = 4(\\sin(x))^{11}\\)\n\\(f'(x) = 44(u)^{10} \\rightarrow 44(\\sin(x))^{10}\\)\n\\(g(x) = \\sin(x)\\)\n\\(g'(x) = \\cos(x)\\)\n\nFormula: \\(h'(x) = f'(g(x)) * g'(x)\\)\n\\(h'(x) = 44(\\sin(x))^{10} * \\cos(x)\\)\nI think the \\(4\\) is getting in my way of seeing that \\(\\sin^{11}(x)\\) is a chain rule. We treat the \\(4\\) with the constant multiple rule. \\(\\sin^{11}(x)\\) can be better seen as a chain rule when written as \\((\\sin(x))^{11}\\). \\(\\sin(x) = u\\); \\((\\sin(x))^{11} = u^{11}\\)"
  },
  {
    "objectID": "Math/formulas.html",
    "href": "Math/formulas.html",
    "title": "Formula",
    "section": "",
    "text": "Slope-Intercept:\n\\[\ny\n\\text{ } = \\text{ }\nmx + b\n\\]\n\\[ y = \\text{y coordinate} \\] \\[m = \\text{slope}\\] \\[ x = \\text{x coordinate} \\] \\[b = \\text{y intercept}\\]\n\nPoint-Slope:\n\\[\ny - y_{1}\n\\text{ } = \\text{ }\nm(x-x_{1})\n\\]\n\\[ y = \\text{y coordinate of second point} \\] \\[ y_{1} = \\text{y coordinate of point one} \\] \\[m = \\text{slope}\\] \\[ x = \\text{x coordinate of second point} \\] \\[ x_{1} = \\text{x coordinate of point one} \\]\n\n\nLimit Definition\n\\[\nf'(x)\n\\text{ } = \\text{ }\n\\lim_{h \\to 0} \\frac{f(x+h) - f(x)}{h}\n\\]"
  },
  {
    "objectID": "Math/integrals.html",
    "href": "Math/integrals.html",
    "title": "Integrals",
    "section": "",
    "text": "Homework Assigment\nThis is about going from derivative to back to the function. This is called the antiderivative\n\\(f'(x)\\) is the notation for the derivative\n\\(F'(x)\\) is the notation for the antiderivative\n\n\n\n\n\n\nExample\n\n\n\nFinding Antiderivatives\nDerivative \\(f'(x) = 1\\), then antiderivative \\(f(x) = x + c\\)\n\\(f(x) = 2x \\quad \\Rightarrow \\quad F(x) = x^{2}\\)\n\n\n\n\n\n\n\n\nNotation\n\n\n\n\\(F'(x)\\) is the process of finding \\(f(x)\\) by starting with a derivative and getting to \\(f(x)\\)\n\n\n\n\n\\[\n{\\sum _{i=1} ^{n} {a_i} }\n\\]\n\\(a_i\\) describes the terms to be added and the \\(i\\) is called the index"
  },
  {
    "objectID": "Math/integrals.html#w08-homework-the-indefinite-integral",
    "href": "Math/integrals.html#w08-homework-the-indefinite-integral",
    "title": "Integrals",
    "section": "W08 Homework The Indefinite Integral",
    "text": "W08 Homework The Indefinite Integral\nHomework Assignment"
  },
  {
    "objectID": "Math/rpackages.html",
    "href": "Math/rpackages.html",
    "title": "Developing R Packages",
    "section": "",
    "text": "create(\"packagename\") and dir(\"packagename\")\nCreating a package can include:\n\nfolders to store data\nuser guides (known as vignettes)\ntests\ndemos\nand others\n\nDESCRIPTION and NAMESPACE compulsory directories\n\nlibrary(devtools)\n\n\ncreate('datasummary')\ndir('datasummary') #to see what is in the package\n\n\n“DESCRIPTION”, “NAMESPACE”, “R”, “datasummary.Rproj”\n\nAll the code for your package goes in the R directory\nstop() prints an error message\nOptional Directories:\n\ndata\n\nstored as an rdata file\nuse_data() function\n\nvignettes\n\nuser guide\ndemos\ndo not include spaces in the vignette name\n\ntests\ncompiled code\ntranslations\n\nNo subdirectories allowed\n\n\n\nuse_data() inserts data into the package/library? Creates the data directory too\n\n\n# Add the weather data\nuse_data(weather, pkg = \"datasummary\", overwrite = TRUE)\n\n\nsame for other use_*() functions\n\n\n\n\nI think this is for adding functions to the package/library\n\ndata_summary <- function(x, na.rm = TRUE){\n  num_data <- select_if(x, .predicate = is.numeric) \n  map_df(num_data, .f = numeric_summary, na.rm = TRUE, .id = \"ID\")\n}\n\n# Write the function to the R directory\ndump(\"data_summary\", file = \"datasummary/R/data_summary.R\")"
  },
  {
    "objectID": "Math/rpackages.html#chapter-2-documenting-packages",
    "href": "Math/rpackages.html#chapter-2-documenting-packages",
    "title": "Developing R Packages",
    "section": "Chapter 2: Documenting Packages",
    "text": "Chapter 2: Documenting Packages\n\nIntroduction to roxygen2\n\nhelp files (documentation)\nallows adding a header to a function containing all the important information about the function\nroxygen headers start with #'\nFirst assumed headers: title, description, details section\n\nit is necessary that you seperate each one of them by a new line\n\nOther headers need special tags like @param, @author…\n\n@param Example:\n\n#' @param data A data frame or matrix from which rows are to be samples\n#' @param size Numeric. Number of rows to return\n\nI think this is the latex-esk style of documentation\n\n@import package_name to use functions from them rather than library(package_name) like in scripts\n\ndoing this makes the namespace and functions available to your package\nyou can also use the importfrom tag to import just a single package\n\n\n\n\nA simple function header: Code Practice\nThe roxygen headers are included in the same script as the function code. You use roxygen comments #’ to identify a line as part of the roxygen header. You can include regular R comments in the header if you wish, using the usual comment character, #.\nThe first three lines of the header have special meaning and you don’t need to use tags to identify them. The first three lines are:\n\ntitle\ndescription\ndetails\n\nSince you don’t mention any tags to identify the first three lines, it is necessary that you seperate each one of them by a new line. For example:\n\n#' Title goes here\n#'\n#' Description goes here\n#'\n#' Details go here\n\n\n# Add a title and description\n#' Numeric Summaries\n#'\n#' Summarises numeric data and returns a data frame containing the minimum value, median, standard deviation, and maximum value\n\nnumeric_summary <- function(x, na.rm){\n\n    if(!is.numeric(x)){\n        stop(\"Data must be numeric\")\n    }\n    \n    data.frame( min = min(x, na.rm = na.rm),\n                median = median(x, na.rm = na.rm),\n                sd = sd(x, na.rm = na.rm),\n                max = max(x, na.rm = na.rm))\n}\n\n\n\nDocumenting function arguments: Code Practice\nOne of the most important aspects of a function to document are the arguments.\nWith roxygen you do this with the @param tag. You follow the tag with the argument name and then any details the user needs to know.\nIf there is a lot of information that you need to provide about an argument you might want to consider putting this in the details section instead.\nNormally you must document every argument of your function, but in this exercise you’ll just document the first argument and come back to the second one later!\n\n#' Numeric Summaries\n#'\n#' Summarises numeric data and returns a data frame containing the minimum value, median, standard deviation, and maximum value.\n#'\n# Add appropriate tag and details to document the first argument\n#' @param x a numeric vector containing the values to summarize.\n\n\nnumeric_summary <- function(x, na.rm){\n\n    if(!is.numeric(x)){\n        stop(\"data must be numeric\")\n    }\n    \n    data.frame( min = min(x, na.rm = na.rm),\n                median = median(x, na.rm = na.rm),\n                sd = sd(x, na.rm = na.rm),\n                max = max(x, na.rm = na.rm))\n}\n\n\n\nImporting other packages: Code Practice\nIf you wish to use functions from other packages, you should import them in your roxygen header. You can use @import to import an entire package, or @importFrom to import a single function. To show you how @importFrom works, we have imported the gather() function from the tidyr package for you (although it’s not needed in this case).\n\n#' Summary of Numeric Columns\n#'\n#' Generate specific summaries of numeric columns in a data frame\n#' \n#' @param x A data frame. Non-numeric columns will be removed\n#' @param na.rm A logical indicating whether missing values should be removed\n#' @import purrr\n#' @import dplyr\n#' @importFrom tidyr gather\ndata_summary <- function(x, na.rm = TRUE){\n  \n  num_data <- select_if(x, .predicate = is.numeric) \n  \n  map_df(num_data, .f = numeric_summary, na.rm = na.rm, .id = \"ID\")\n  \n}\n\n\nso I think these tags are both for reading documentation output and the words actually have actions behind them like @import telling us what other packages is being imported and the actually making it imported too\n\n\n\nHow to export functions?: Video\n\n\n\n\n\n\nTranscript\n\n\n\n\n\n\nHow to export functions? Exported functions are ones which are visible to the end user.\nExported functions That means that when they load your package, they’ll be able to use these functions. Non-exported functions are those which you don’t want to be visible to the end user. So you might have things like utility functions that are called by the other functions in your package, but you don’t actually want people using them directly. You document your exported functions using roxygen headers, and then when you build your package, your exported functions are automatically listed in the NAMESPACE file. Next, you’ll be taking a look at examples of exported and non-exported functions.\nExported and non-exported functions This is a function from the simutils package called sum_na. It counts all the missing values in a vector and returns the total. As you can see, there is no “@export” tag, so this function is not exported. As you’ll see in a moment, it is a utility function to be used by other functions from this package, but not one that you want the end user to access. Now let’s take a look at another function from simutils.\nExported and non-exported functions This function is also from simutils and is called na_counter. It takes a DataFrame or matrix as input, verifies the object input type, and then applies the sum_na function you saw in the last slide to each column of the input DataFrame or matrix. This function does contain an “@export” tag and so is exported and available to the end user. Now let’s take a look at how you can refer to these functions.\nExported and non-exported functions Imagine the simutils package has been built and you’ve now installed it. You can use the library() function to load the package, and then, call na_counter() or any other exported function from the package NAMESPACE to use them. But, what if you try to use the sum_na() function in the same way?\nCalling non-exported functions This time, you get an error, telling you that sum_na() could not be found. This happens because only the exported functions from the simutils package are loaded. So how do you access the sum_na() function then?\nCalling non-exported functions If you want to refer to non-exported functions, you must type the name of a package, then three colons, and then the function name, like in the example here. This calls the function directly, instead of searching for it in the NAMESPACE. OK, so that was an introduction to exported and non-exported functions, and how to call them. Now let’s take a look at how you use the roxygen header to specify if a function should be exported.\nExporting functions with roxygen headers When you use the “@export” tag, this indicates that the function should be exported. You can see that this function has been exported - so the end user of the package will be able to make use of it. If you don’t want to export a function, just don’t include the tag at all in your roxygen header.\nLet’s practice! Now let’s take a look at how exporting functions applies to your dataSummary package!\n\n\n\n\n\nExported functions are ones which are visible to the end user\nthe opposite are utility functions (things that happen in the background of exported functions)\nthis example’s tags are in this order: param, import, return, export, examples\nIf you want to refer to non-exported functions use the ::: call\n\nExample: packagename:::non_exported_function()\n\n\n\n\nExport best practice: Quiz\n\nutility functions (non-exported functions) are low-level functions\nuser functions (exported functions) are high-level functions\n\n\n\nExporting functions: Code Practice\n\n\n\n\n\n\nExercise\n\n\n\nAlthough the NAMESPACE file is used to identify functions that are exported you use roxygen tags to create this file. This makes it really easy to see, right next to the function, if your users will be able to work with it or not.\nWe mark a function for exporting using the tag @export.\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n#' Summary of Numeric Columns\n#'\n#' Generate specific summaries of numeric columns in a data frame\n#' \n#' @param x A data frame. Non-numeric columns will be removed\n#' @param na.rm A logical indicating whether missing values should be removed\n#' @import dplyr\n#' @import purrr\n#' @importFrom tidyr gather\n#' @export\ndata_summary <- function(x, na.rm = TRUE){\n  \n  num_data <- select_if(x, .predicate = is.numeric) \n  \n  map_df(num_data, .f = numeric_summary, na.rm = na.rm, .id = \"ID\")\n  \n}\n\n\n\n\n\nDocumenting other elements: Video\n\n\\dont_run{} for the @examples tag section\n\\code{} for the @return tag section\nThis function’s tags are: param, param, author, import, return, export, examples\nOther tags include: seealso, notes\n\n\n\n\n\n\n\nTranscript\n\n\n\n\n\n\nDocumenting other elements\nDocumenting examples You can include “@examples” in your function documentation to demonstrate how to use it. You should provide at least one example for any function that is exported, and for any functions that have complicated arguments. Examples should ideally be easily reproducible and should not cause an error. If you are going to publish your package to CRAN then there are recommendations of what is considered a reasonable time for your examples to run in, so make sure to check what these are at the time of submission before you do submit. This is how you might include an example of how to run a function in a roxygen header. The examples tag goes next to code examples of running the function.\nNon-running examples Your examples are automatically run during the package checking stage, which we’ll be talking about later. In certain circumstances, you might want to include examples of how to run a function without these examples actually being run. For instance, if your function relies on the user providing an API key or being connected to a database. You can use the “” run markup tag to include an example which will not be run during the checking stage.\nDocumenting function return values You can use the “@return” tag to document the output of the function. This is where you can tell users what they can expect to get from the function, whether that’s data, a graphic or any other output. In the example here, after the “@return” tag, we’ve included a short sentence describing the return object. The use of the “” markup tag here affects the formatting of the word ‘size’ to indicate to the end user that we’re referring to one of the parameters.\nAdditional documentation There are a number of other things you might choose to document. You can use the “@author” tag to tell the end user who wrote the function like we’ve done here. There’re other tags you might also want to use, for example, you can use the “@seealso” tag to include a link to other functions that are in some way closely related to your function. And you might want to use the “@notes” tag to add any other notes relating to the function, for instance, if it’s experimental or likely to change.\nLet’s practice! Now let’s try some examples.\n\n\n\n\n\n\nAdding examples: Code Practice\n\n\n\n\n\n\nExercise\n\n\n\n\n\nExamples are the way that your end users will learn how to work with your code. You should provide at least one example for any function that is exported. If there are any tricky arguments to your function you might also want to consider examples for those.\nExamples should ideally be easily reproducible and should not cause an error. If you are going to publish your package to CRAN then examples should also run in a reasonable time, CRAN sets this to around 15 minutes but it’s worth double checking the recommendations at the time of submission.\nYou add examples using the @examples tag. Examples will typically span multiple lines. This is fine as roxygen will assume that everything is part of the examples until it finds another tag.\n\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\n#' Data Summary for Numeric Columns\n#'\n#' Custom summaries of numeric data in a provided data frame\n#'\n#' @param x A data.frame containing at least one numeric column\n#' @param na.rm A logical indicating whether missing values should be removed\n#' @import dplyr\n#' @import purrr\n#' @importFrom tidyr gather\n#' @export\n#' @examples \n#' data_summary(iris)\n#' data_summary(airquality, na.rm = FALSE)\n\ndata_summary <- function(x, na.rm = TRUE){\n  \n  num_data <- select_if(x, .predicate = is.numeric) \n  \n  map_df(num_data, .f = numeric_summary, na.rm = na.rm, .id = \"ID\")\n  \n}\n\n\n\n\n\n\nDocumenting function return values: Code Practice\n\nI’m not sure if\n\n\n\n\n\n\n\nExercise\n\n\n\n\n\nYou document the return value of a function using the tag @return. This is where you can tell users what they can expect to get from the function, be that data, a graphic or any other output.\nWhen you write documentation you may want to format the text to look like code, link to other functions or, particularly for return objects, format as a bulleted list. You can do this using special formatting:\n\nFor code you use \\code{text to format}\nTo link to other functions you use \\link[packageName]{functionName}, although note the package name is only required if the function is not in your package\nTo include an unordered list you use \\itemize{}. Inside the brackets you mark new items with\nfollowed by the item text.\n\n\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\n#' Data Summary for Numeric Columns\n#'\n#' Custom summaries of numeric data in a provided data frame\n#'\n#' @param x A data.frame containing at least one numeric column\n#' @param na.rm A logical indicating whether missing values should be removed\n#' @import dplyr\n#' @import purrr\n#' @importFrom tidyr gather\n#' @export\n#' @examples\n#' data_summary(iris)\n#' data_summary(airquality, na.rm = FALSE)\n#'\n## Update the details for the return value\n#' @return \n#' This function returns a \\code{data.frame} including columns: \n#' \\itemize{\n#'  \\item ID\n#'  \\item min\n#'  \\item median\n#'  \\item sd\n#'  \\item max\n#' }\n#'\n#' @export\ndata_summary <- function(x, na.rm = TRUE){\n  \n  num_data <- select_if(x, .predicate = is.numeric) \n  \n  map_df(num_data, .f = numeric_summary, na.rm = na.rm, .id = \"ID\")\n  \n}\n\n\n\n\n\n\nAdditional documentation: Code Practice\n\n\n\n\n\n\nExercise\n\n\n\nBeyond the functions arguments and return values there are many additional items that can be provided in function help files. From who wrote that function to other functions that you might be interested in using. We will also see later how we can identify dependencies using the roxygen header.\nOther tags that we can use include:\n\n@author to identify who wrote the function.\n@seealso to list other functions that may be of interest to users.\n@notes to add any other notes relating to the function (e.g. if its experimental, likely to change etc.)\n\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n#' Summary of Numeric Columns\n#' Generate specific summaries of numeric columns in a data frame\n#'\n#' @param x A data frame. Non-numeric columns will be removed\n#' @param na.rm A logical indicating whether missing values should be removed\n#' @import dplyr\n#' @import purrr\n#' @importFrom tidyr gather\n#' @export\n#' @examples\n#' data_summary(iris)\n#' data_summary(airquality, na.rm = FALSE)\n#' \n#' @return This function returns a \\code{data.frame} including columns: \n#' \\itemize{\n#'  \\item ID\n#'  \\item min\n#'  \\item median\n#'  \\item sd\n#'  \\item max\n#' }\n#'\n## Add in the author of the `data_summary()` function\n#' @author \n#' My Name <myemail@example.com>\n## List the `summary()` function (from the `base` package)\n#' @seealso\n#' \\link[base]{summary}\n\ndata_summary <- function(x, na.rm = TRUE){\n  \n  num_data <- select_if(x, .predicate = is.numeric) \n  \n  map_df(num_data, .f = numeric_summary, na.rm = na.rm, .id = \"ID\")\n  \n}\n\n\n\n\n\nMinimum level of documentation: Quiz\n\nWhen producing documentation for a function, they say the function title and documentation of all function arguments are required but documentation of the return value, although it ca be useful to the user\n\n\n\nDocumenting a package: Video\n\nWhereas before we were documenting functions, now we’re on package\nWhat are the similarities and differences of devtools and ryxogen?\n\n\n\n\n\n\n\nTranscript\n\n\n\n\n\n\nDocumenting a package You’ve just learned how to document functions using roxygen headers. Now you’re going to take a look at how you can document other components of your package.\nPackage level documentation You can also generate the documentation for the package itself using roxygen2. For package documentation, you need to include the tags “@docType” and “@name”. The header itself needs to be followed by the package keyword because all roxygen headers need to be followed by some form of R code. Whilst this header can go in any file, a good practice is to create a separate R script which takes the package name that contains this header. This is how this might look in the simutils package. You’d save it in a file called “simutils(dot)R” in the R directory.\nMinimum level of documentation In the previous section of the course, you learned numerous aspects of a function that can be documented, but what is the absolute minimum level of documentation for a function? As a minimum, documentation for each function in your package should include the function title, the function description, the names and descriptions for all of the arguments, and if necessary, an export tag. The other components of documentation aren’t necessarily needed, but you should include them if you think they’re going to be useful to the end user of your package.\nDocumenting data objects Many packages include data that are used in examples or for reference in functions within the package. Data that you want any user of the package to see can be included in the data directory. The data needs to be appropriately compressed and this, as well as the package structure, will be handled for you by the “use_data()” function in devtools. Here’s an example of how you’d take a DataFrame in your current environment, in this case, a DataFrame called “sim_dat”, and then compress it and put the compressed file in the data directory, all with just a single function call.\nDocumenting data objects As with any object that is visible to the end user you need to provide some corresponding documentation for your datasets. You can also do this using roxygen2 but using alternative tags format and source to describe the format of the data and the original source - where you got it from. Here’s an example of how to document the “sim_dat” dataset to be included in the simutils package.\nCreating man files Once you have created function headers and the package help file you can create the “(dot)Rd” files for the package, which go in the man directory, using the document function in devtools. The primary argument to this function is the file path to the top level of the package. This will perform the task of creating or updating all of the “(dot)Rd” files as well as the NAMESPACE file.\nLet’s practice! OK, so now it’s your turn to document your package!\n\n\n\n\n\n\nAdding package documentation: Code Practice\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nIn addition to the individual functions you can also document the whole package.\nWhen you document a package you can use all of the same tags as for functions but the problem that you have is that there is no R code to document. Instead you put the keyword “_PACKAGE” underneath your package header.\nYou should also use the @docType and @name tags to indicate that this is package level documentation, and specify your package name.\nYou should then save the package documentation in the R directory in a file ending with .R with the same name as the package.\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n#' datasummary: Custom Data Summaries\n#'\n#' Easily generate custom data frame summaries\n#'\n#' @docType package\n#' @name datasummary\n\"_PACKAGE\"\n\n\n\n\n\nDocumenting data objects: Code Exercise\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nIf you include a data set in your package you must also provide documentation for it. As with package level documentation, you should include a title and description.\nWith a data set, once again, there is no function object to document. You instead give the name of the dataset as a character string, for instance “airquality”. Additionally there are two tags that you need to use:\n\n@format to describe the format of the data. This is often used with the describe format.\n@source to identify where the data came from. You should then save the package documentation in the R directory with a suitable name (in the above case, either airquality.R or data.R).\n\nThe weather dataset is available in your workspace. Run print(weather) to view it.\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n#' Random Weather Data\n#'\n#' A dataset containing randomly generated weather data.\n#'\n#' @format A data frame of 7 rows and 3 columns\n#' \\describe{\n#'  \\item{Day}{Numeric values giving day of the week, 1 = Monday, 7 = Sunday}\n#'  \\item{Temp}{}\n#'  \\item{Weather}{}\n#' }\n#' @source Randomly generated data \n\"weather\"\n\n\n\n\n\nCreating man files: Code Practice\n\ndocument() builds all documentation for a package\nit seems like all the devtools packages take their arguments in quotation marks.\nhelp() is the devtools version of ? and ??\n\n\n\n\n\n\n\nExercise\n\n\n\nOnce you’ve created your documentation using roxygen headers, you need to build your documentation. You can use the document() function from the devtools package to generate your documentation, supplying the path to the package as the first argument. The generated documentation will appear in the man directory. Once you’ve documented your package, you can view the help files just like you can with any of your existing packages.\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n# Generate package documentation\ndocument(\"datasummary\")\n\n# Examine the contents of the man directory\ndir(\"datasummary/man\")\n\n# View the documentation for the data_summary function\nhelp(\"data_summary\")\n\n# View the documentation for the weather dataset\nhelp(\"weather\")"
  },
  {
    "objectID": "Math/rpackages.html#chapter-3-checking-and-building-r-packages",
    "href": "Math/rpackages.html#chapter-3-checking-and-building-r-packages",
    "title": "Developing R Packages",
    "section": "Chapter 3: Checking and Building R Packages",
    "text": "Chapter 3: Checking and Building R Packages\n\nWhy check an R package?\n\nChecking a package (package(\".\")) makes sure vignettes can be built, unit tests in the package pass, and all function arguments have been documented.\n\n\n\n\n\n\n\nTranscript\n\n\n\n\n\n\nWhy check an R package? You have now done everything that you need to do, as a minimum, to turn your directory structure into a package that you can share with other people. Hopefully, you have done everything exactly as you should have done but sometimes we miss things, put information in the wrong place or forget to include something really important like documentation. So before you build the package it’s good practice to check it.\nWhat should you check? There is a very long list of checks that should be performed regardless of how you are sharing your code, and in fact, must be performed for submission to CRAN. You can think of this as a basic quality check to make sure that you haven’t forgotten to add documentation for a function and that you have listed all of the dependencies correctly. But you should note that these checks will not check that your code does what you think it is doing. That’s for you to do and unit testing that you will see later can help you out here. If you have included tests, it will ensure that they all pass and if you have included a vignette it will ensure that it can be built. In total there are over 50 checks that need to be performed.\nRunning a check The good news is that you don’t have to do this manually. There is a system level tool that is provided with R that runs all of these checks and to make it even easier, devtools includes a check function that accesses this tool for you. By default, this function will even re-run the document function for you, just in case you forgot after making changes. It will also by default run with the same settings used by CRAN. Whilst you can turn this off you might as well leave it set as it does mean that your package is CRAN compatible should you decide to share it that way. There are a number of other options that you can set and checks that you can turn off but most of the time you will simply run with the defaults.\nErrors, warnings, and notes Once all of the checks have run the output will give you a summary of each of the checks and the status of that check. All being well everything will simply say OK. At some point though you will get an error, warning or note as the result of a check. An error is something that you must fix. It means there is a problem with your package that will cause problems for the end user. A warning is less problematic but you should still try fixing them. They typically highlight something that means it’s likely that the package can be used without issue but may cause a problem. This could relate to dependencies, documentation or elements of the code. Notes are the least problematic. Whilst you don’t have to fix all notes, especially if you are not submitting to CRAN, it is still recommended that you do try. Some notes, such as an unconventional license file, can’t be solved. This is fine, even if submitting to CRAN, but you will be expected to explain why you should be allowed this exception.\nLet’s practice! Let’s practice this by checking the package that you have been creating and trying to resolve some common check issues.\n\n\n\n\n\n\nRunning a check: Quiz\n\n\nErrors, warnings and notes\n\n\n\n\n\n\nTranscript\n\n\n\n\n\n\nErrors, warnings and notes With over 50 checks to be performed, there are a large number of possible errors, warnings and notes that could be returned. The good news is that if you have used devtools, it’s likely that you will only encounter a small number of the most common issues.\nPackage dependencies Some of the most common check issues relate to package dependencies. When you run your check, all of the dependencies of your package must be available. If they are not then the checks can’t be run and you will get an error. In the case of building a package using continuous integration, if you include a package that is not available on the system you are building on, you will also get an error.\nDocumentation You will often find that you see issues in your check relating to documentation, even if you are using roxygen as we saw in the last chapter. Common issues here relate to undocumented function arguments. If you have added an argument to a function or changed its name and not remembered to add the new argument to the function header, then you will see a check issue. The check will also let you know if you have forgotten to document a function entirely.\nDocumentation Another common documentation issue relates to the examples. As we said in the last chapter, your examples must run. Any example that fails for any reason will cause a check error. The most common cause of this is making changes to the function itself but not updating the example. If you want to include an example that deliberately fails then you need to use the “” functionality. The “runExample()” function can be helpful for checking just the examples in your help files, rather than waiting to run the whole check to find out if there is a problem.\nPDF documentation When it comes to the PDF documentation, problems here relate to Latex. The first thing to make sure is that you have Latex installed and that R can find it.\nTests You haven’t seen unit tests yet but once you have included them they all need to pass for your check to pass. You will see more on this later so there is no need to worry about it right now.\nLet’s practice! Time to put this into practice."
  },
  {
    "objectID": "Math/trig.html",
    "href": "Math/trig.html",
    "title": "Learning University",
    "section": "",
    "text": "Function\nRight Triangle Definition\nCircular Function Definition\nBasic Identity\nDomain\nRange\n\n\n\n\n\\(\\cos{}\\)\n\\(\\cos{(\\theta)} = \\frac{\\text{adj}}{\\text{hyp}}\\)\n\\(\\cos{(\\theta)} = \\frac{x}{r}\\)\n\\(\\cos{(x)} = \\frac{1}{\\sec{(x)}}\\)\n\\((-\\infty, +\\infty)\\)\n\\([-1,+1]\\)\n\n\n\\(\\sin{}\\)\n\\(\\sin{(\\theta)} = \\frac{\\text{opp}}{\\text{hyp}}\\)\n\\(\\sin{(\\theta)} = \\frac{y}{r}\\)\n\\(\\sin{(x)} = \\frac{1}{\\csc{(x)}}\\)\n\n\n\n\n\\(\\tan{}\\)\n\\(\\tan{(\\theta)} = \\frac{\\text{adj}}{\\text{hyp}}\\)\n\\(\\tan{(\\theta)} = \\frac{y}{x}\\)\n\\(\\tan{(x)} = \\frac{\\sin{(x)}}{\\cos{(x)}} = \\frac{1}{\\cot{(x)}}\\)\n\n\n\n\n\\(\\sec{}\\)\n\\(\\sec{(\\theta)} = \\frac{\\text{hyp}}{\\text{adj}}\\)\n\\(\\sec{(\\theta)} = \\frac{r}{x}\\)\n\\(\\sec{(x)} = \\frac{1}{\\cos{(x)}}\\)\n\n\n\n\n\\(\\csc{}\\)\n\\(\\csc{(\\theta)} = \\frac{\\text{hyp}}{\\text{opp}}\\)\n\\(\\csc{(\\theta)} = \\frac{r}{y}\\)\n\\(\\csc{(x)} = \\frac{1}{\\sin{(x)}}\\)\n\n\n\n\n\\(\\cot{}\\)\n\\(\\cot{(\\theta)} = \\frac{\\text{adj}}{\\text{opp}}\\)\n\\(\\cot{(\\theta)} = \\frac{x}{y}\\)\n\\(\\cot{(x)} = \\frac{\\cos{(x)}}{\\sin{(x)}} = \\frac{1}{\\tan{(x)}}\\)"
  },
  {
    "objectID": "Math/trig.html#other",
    "href": "Math/trig.html#other",
    "title": "Learning University",
    "section": "Other",
    "text": "Other\n\\[\n    \\text{trig}(\\theta) = x  \n\\]\n\\[\n    \\text{arctrig}(x) = \\theta\n\\]\n\n\n\n\n\n\nNote\n\n\n\n\n\\(x\\) means coordinate\n\\(\\theta\\) means angle"
  },
  {
    "objectID": "other_subjects/rel_presentation_notes.html",
    "href": "other_subjects/rel_presentation_notes.html",
    "title": "34 In Quest of Reformation Part 1",
    "section": "",
    "text": "Two popes at the time: Gregory XII the Roman Pope, and the Pisan Pope John XXIII\nthe thinking was that a council would determine who was the legitimate Pope\nHow should we conviene this council? It wouldn’t be put on by one side, they would choose their Pope. To fix this, the cardinals of both parties worked together to gather in Pisa in 1409\n\ninsert picture of leaning tower of pisa\n\nboth parties tried to thwart each other’s claim\nWhat was the result of this concil? It was decided that both of the popes were unworthy to be Pope.\nthis council had the backing of each side as well as the courts in Europe.\nThe next issue the council moved onto was that of simony and other issues in the church.\n\nthis is\n\nAlexander V was elected by the council to be the new pope\nThe council thought this would bring about a productive ending, but it only made the schism worse.\nEurope mostly accepted Alexander to be the pope, but the other two had a big enough base of supporters to cause issues. Also, Alexander died less than a year after becoming Pope.\nJohn XXIII was elected to take his place by the cardinals.\nAnother council gathered at Constance in 1414. There was political termoil and John was sentanced to prison for the rest of his life and Gregory abdicated."
  },
  {
    "objectID": "other_subjects/rel_presentation_notes.html#john-wycliffe",
    "href": "other_subjects/rel_presentation_notes.html#john-wycliffe",
    "title": "34 In Quest of Reformation Part 1",
    "section": "John Wycliffe",
    "text": "John Wycliffe"
  },
  {
    "objectID": "other_subjects/rel_presentation_notes.html#john-huss",
    "href": "other_subjects/rel_presentation_notes.html#john-huss",
    "title": "34 In Quest of Reformation Part 1",
    "section": "John Huss",
    "text": "John Huss\n\nfrom the Czech Republic (1362-1415)\nlots going on in his country about to many Germans there.\nMy 3 favorite things from Huss:\n\n“He thus came to the conclusion that the Bible is the final authority by which the pope as well as any Christian is to be judged. A pope who does not obey the Bible is not to be obeyed.”\nHuss, who had bought an indulgence twenty years earlier, by then had come to the conclusion that only God could grant forgiveness, and that to sell what comes only from God is usurping God’s power\nWas against the sending of Christians to fight in crusaides\n\nExcomunicated more than once\nHe eventually left the public scene and lived in the country side. He continued his writings of the need for reformation whist living there.\nHe was invited to attend a Great Council in Constance from Sigismund. This council was supposed to be a fresh start for the church, so he was ega to attend.\nHe was promised safety there but he was turned on. He was condemed as a heratic and sentance to the slammer.\nIn pleading his cause, he said, “I appeal to Jesus Christ, the only judge who is almighty and completely just. In his hands I place my cause, since he will judge each, not on the basis of false witnesses and erring councils, but on truth and justice.”\nThe Bohemians were indignant after hearing of his myrtr, and almost unanimously repudiated the council. Four hundred and fifty-two noblemen gathered in solemn assembly and announced their agreement with Huss, that an unworthy pope ought not be obeyed. The council countered by ordering that the University of Prague be dissolved\nFour articles came of his death as the Bohemian’s resisted the church.\nThe church rejected them at first but after failed crusaides, they compromised with them. Very sad"
  },
  {
    "objectID": "other_subjects/test_rjs_pres.html#hello-there",
    "href": "other_subjects/test_rjs_pres.html#hello-there",
    "title": "Test RJS Presentation",
    "section": "Hello, There",
    "text": "Hello, There\nThis presentation will show you examples of what you can do with Quarto and Reveal.js, including:\n\nPresenting code and LaTeX equations\nIncluding computations in slide output\nImage, video, and iframe backgrounds\nFancy transitions and animations\nPrinting to PDF\n\n…and much more\n\nSpeaker notes go here.\nRemember to say this\nthis is the code print(\"Hello World\")"
  },
  {
    "objectID": "other_subjects/test_rjs_pres.html#pretty-code",
    "href": "other_subjects/test_rjs_pres.html#pretty-code",
    "title": "Test RJS Presentation",
    "section": "Pretty Code",
    "text": "Pretty Code\n\nOver 20 syntax highlighting themes available\nDefault theme optimized for accessibility\n\n# Define a server for the Shiny app\nfunction(input, output) {\n  \n  # Fill in the spot we created for a plot\n  output$phonePlot <- renderPlot({\n    # Render a barplot\n  })\n}\n\nLearn more: Syntax Highlighting"
  },
  {
    "objectID": "other_subjects/test_rjs_pres.html#code-animations",
    "href": "other_subjects/test_rjs_pres.html#code-animations",
    "title": "Test RJS Presentation",
    "section": "Code Animations",
    "text": "Code Animations\n\nOver 20 syntax highlighting themes available\nDefault theme optimized for accessibility\n\nR Code\n\n\nfunction(input, output) {\n  \n  # Fill in the spot we created for a plot\n  output$phonePlot <- renderPlot({\n    # Render a barplot\n    barplot(WorldPhones[,input$region]*1000, \n            main=input$region,\n            ylab=\"Number of Telephones\",\n            xlab=\"Year\")\n  })\n}\n\n\nPython Code\n\n\n\n\nLearn more: Code Animations"
  },
  {
    "objectID": "other_subjects/test_rjs_pres.html#line-highlighting",
    "href": "other_subjects/test_rjs_pres.html#line-highlighting",
    "title": "Test RJS Presentation",
    "section": "Line Highlighting",
    "text": "Line Highlighting\n\nHighlight specific lines for emphasis\nIncrementally highlight additional lines\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\nLearn more: Line Highlighting"
  },
  {
    "objectID": "other_subjects/test_rjs_pres.html#executable-code",
    "href": "other_subjects/test_rjs_pres.html#executable-code",
    "title": "Test RJS Presentation",
    "section": "Executable Code",
    "text": "Executable Code\n\nlibrary(ggplot2)\nggplot(mtcars, aes(hp, mpg, color = am)) +\n  geom_point() +\n  geom_smooth(formula = y ~ x, method = \"loess\")\n\n\n\nLearn more: Executable Code"
  },
  {
    "objectID": "other_subjects/test_rjs_pres.html#latex-equations",
    "href": "other_subjects/test_rjs_pres.html#latex-equations",
    "title": "Test RJS Presentation",
    "section": "LaTeX Equations",
    "text": "LaTeX Equations\nMathJax rendering of equations to HTML\n\n\n\\begin{gather*}\na_1=b_1+c_1\\\\\na_2=b_2+c_2-d_2+e_2\n\\end{gather*}\n\n\\begin{align}\na_{11}& =b_{11}&\n  a_{12}& =b_{12}\\\\\na_{21}& =b_{21}&\n  a_{22}& =b_{22}+c_{22}\n\\end{align}\n\n\\[\\begin{gather*}\na_1=b_1+c_1\\\\\na_2=b_2+c_2-d_2+e_2\n\\end{gather*}\\]\n\\[\\begin{align}\na_{11}& =b_{11}&\n  a_{12}& =b_{12}\\\\\na_{21}& =b_{21}&\n  a_{22}& =b_{22}+c_{22}\n\\end{align}\\]\n\n\n\nLearn more: LaTeX Equations"
  },
  {
    "objectID": "other_subjects/thoughts.html",
    "href": "other_subjects/thoughts.html",
    "title": "Thoughts",
    "section": "",
    "text": "Top of page have the slide show\n\n\nmeant for introducing new concepts and high level exposure mostly\n\n\nTop right corner have a video like the 221 site\n\n\nthis could be me going through the slide show\nI think it’ll be good for visual/audio learners\nhow can I make my own video\n\nMovieFlame to make documentaries of scriptual videos\nlike 365DataScience videos\n\n\n\nArticle as the main\n\n\nthis has instrution (like OpenStacks)\nhas practice problems at the bottom of this section\n\n\nBottom of page have “additional resources”\n\n\nLike “honorable mention” resources that did not make it into the article part\n\n\nWhere does the money in higher education institutions go??\n“General Eds” of: - physical fitness/proper eating\nRelevant Topics: - video production\nOne big thing that there should be is: - Mastery of topics - Continuation of education/ “forever learning”"
  },
  {
    "objectID": "other_subjects/Tyndale.html",
    "href": "other_subjects/Tyndale.html",
    "title": "William Tyndale: First Translator of the New Testament to English",
    "section": "",
    "text": "Biography:\n\nfrom present day west of London and south of Birmingham called Yorkshire which sits just at the tip of the Bristol Channel (https://www.christianitytoday.com/history/people/scholarsandscientists/william-tyndale.html)\nStudied at the University of Oxford\nBecame an instructor at the University of Cambridge\nHe began his first translation of New Testament in 1523 (from Greek to English) completing it in 1525 (https://www.britannica.com/biography/William-Tyndale)\nThe English authorities gave him trouble so he continued his work in Germany in 1524.\nHe completed his first translation of New Testament in July of 1525 (https://www.christianitytoday.com/history/people/scholarsandscientists/william-tyndale.html)\nHis book The Obedience of a Christian Man (full name The Obedience of a Christen man, and how Christen rulers ought to govern, wherein also (if thou mark diligently) thou shalt find eyes to perceive the crafty convience of all iugglers), is published in 1528\n\n“and is best known for advocating that the king of a country was the head of that country’s church, rather than the pope”. Gerard Wegemer, Thomas More: Portrait of Courage (Scepter, 1998), 131\nbook was officialy banned\nmentioned in the works of Shakespere\n\nArested in 1534 by the Roman Catholic Authorities in Antwerp\nStrangled to death in October 6th, 1536 after being “condemned as a heretic” the month prior. His last words were, “Lord, open the King of England’s eyes!”\n\nEfforts and Contributions:\n\nThe Engllish can now haev a personal relationship with God\nHe spent grewling hours over the span of two years translating the New Testament from Greek to English.\n\nWhy They Matter:\nHe translated the New Testament from Greek and Hebrew into English. This laid the ground work for us to enjoy such wide spread access of the Holy Bible. King James of Scotland’s name is the most common bible in circulation. When he commissioned his version of the Bible, almost the entirity of it is made up of Tyndale’s work. This shows that the Restoration of the Church of Jesus Christ depends on William Tyndale.\nHe gave the people of England access to the Holy Bible. This was common place in other-Europe, but not the case for the people of England, as the church would have it. This fed the fire of the ongoing Reformation which started eight years prior in 1517 when Martin Luther famously nailed his 95 theses on the walls of the church.\nSocial order disrupted due to his book and his translation not in the hands of the public"
  },
  {
    "objectID": "Math/linear_algebra.html",
    "href": "Math/linear_algebra.html",
    "title": "Linear Algebra",
    "section": "",
    "text": "Systems of linear equations\nIs_Linear when Scalar \\(\\times\\) variable \\(=\\) variable\nLinear: \\(2x_{1}-3x_{2}+5x_{3}=9\\)\nNon-Linear: \\(2\\sqrt{x_{1}}+3x_{2}=5\\)\nNon-Linear: \\(x_{1}^{2}+x_{2}^{2}=3\\)\nLinear: \\(ex_{1}+\\pi{}x_{2}=\\sqrt{2}\\)\nLinear when scalar times variable only. Not variable times variable.\nAugmented means it has a solution? An equal sign? an | ?"
  },
  {
    "objectID": "Math/linear_algebra.html#solving-outcome-possibiblities",
    "href": "Math/linear_algebra.html#solving-outcome-possibiblities",
    "title": "Linear Algebra",
    "section": "Solving Outcome Possibiblities",
    "text": "Solving Outcome Possibiblities\nOptions are either: \\(0\\), \\(1\\), or \\(\\inf{}\\)\nExistence: Does there exist a solution?\nUniqueness: Is there only one solution?\nRemember those rules we learned in Pre-Algebra? Those are coming into play right now.\n\nReplacement: Replace one row by the sum of itself and a multiple of another row\n\nExample: \\(R_{2} \\rightarrow R_{2}+-2R_{1}\\)\n\nInterchange: Interchange two rows\nScaling: Multiply all the entries in arow by a nonzero constant\n\nExample: \\(R_{2} \\rightarrow \\frac{-1}{5}R_{2}\\)\n\n\n\nVocab:\n\nReduced Row Echelon Form"
  }
]